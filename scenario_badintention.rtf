% *** Original Framework 
% (small changes on the clipped predicate, the Doctrine of Double effect rules, and only the relevant ethical constraints included)


% ACTION
event(A):-action(A).
event(A):-auto(A).
event(A) :- act(A).


% FLUENTS
initiates(E,F,T):- effect(E,F), occurs(E,T).
%not negative(S,F): in sim S is er geen negatief effect op F. 
terminates(E,F,T):- effect(E,neg(F)), occurs(E,T).
holds(F,0):- initially(F).
clipped(F,T):- terminates(E,F,T).
clipped(neg(F), T) :- holds(F, T+1), time(T), fluent(F). 

holds(F,T):- initiates(E,F,T-1), time(T).
holds(F,T):- holds(F,T-1), not clipped(F,T-1), not nonInertial(F), time(T).


% EVENTS
incomplete(E,T):- precond(F,E), not holds(F,T), time(T). 
possible(E,T):- not incomplete(E,T), event(E), time(T).
occurs(U,T):- possible(U,T), auto(U). 
occurs(A,T):- possible(A,T), performs(D,A,T), action(A).


% CONSEQUENCES
cons(E,T,F):- occurs(E,T), effect(E,F), holds(F,T+1).
cons(F,T,E):-  occurs(E,T), precond(F,E), holds(F,T).
cons(E1,T1,E3):- cons(E1,T1,C2), cons(C2,T2,E3), event(E1), event(E3), T2>T1.


% MODALITIES
%modality(I;V) :- right(I), value(V).
modality(I) :- right(I).
m_Weight(M,1) :- modality(M).
t_Weight(E,1) :- effect(E,involves(X)).
%value(helpfulness).
right(life).


% ETHICAL EVENT SPECIFICATION
% VALUES
%effect(cure(X,G), displays(helpfulness)):- auto(cure(X,G)).
%effect(kill(X,G), neg(displays(helpfulness))):- auto(kill(X,G)).


% RIGHTS:
effect(kill(X), neg(life)) :- event(kill(X)).
effect(dies(X), neg(life)) :- event(dies(X)).


% VALUES
%good(E,X,M):- effect(E,involves(X)), effect(E,displays(M)), value(M).
%bad(E,X,M):- effect(E,involves(X)), effect(E,neg(displays(M))), value(M).


% RIGHTS
bad(E,X,M):- effect(E,involves(X)), effect(E,neg(M)), right(M).
good(E,X,M):- effect(E,involves(X)), not effect(E,neg(M)), right(M).


% WEIGHT
weightedGood(E,N1*N2,M) :- good(E,X,M), m_Weight(M,N1), t_Weight(E,N2).
weightedBad(E,N1*N2,M) :- bad(E,X,M), m_Weight(M,N1), t_Weight(E,N2).
weight(E,1) :- good(E,X,M).
weight(E,1) :- bad(E,X,M).
final_weight(E,N1-N3) :- event(E), N1=#sum{N2 : weightedGood(E,N2,M1)}, N3=#sum{N4 : weightedBad(E,N4,M2)}.


% THEORIES OF THE RIGHT

%% CONSEQUENTIALISM

%%% PRINCIPLE OF BENEFITS VS COSTS
weightCons(A,T,E,N):- event(A), cons(A,T,E), final_weight(E,N).
weightAct(A,N):- event(A), N=#sum\{N1 : weightCons(A,T,E,N1)\}.
imp(benefitsCosts,A):- weightAct(A,N), N<0.
per(benefitsCosts,A):- event(A), not imp(benefitsCosts,A).

%%% Deontology 

%%% DDE
imp(dde1,A) :- event(A), bad(A,Y,M).
imp(dde2,A) :- event(A), badintention(X, A). 
imp(dde3,A):- event(A), cons(A,T,E1), cons(E1,T2,E2), bad(E1,Y1,M1), good(E2,Y2,M2).
imp(dde4,A):- imp(benefitsCosts,A).
per(dde,A):-  event(A), not imp(dde1,A), not imp(dde2,A), not imp(dde3,A). 


%%% *** My addition to framework 

neg(neg(F)) :- fluent(F), holds(F). 


%INTENTIONALITY

cons(A, B) :- cons(A, T, B), time(T).
believes(X, cons(A, B)) :- cons(A, B), agent(X), event(A), event(B).

intention(X, B) :- intention(X, A), believes(X, cons(A, B)).

badintention(X, A) :- intention(X, A), bad(A,Y,M). 
goodintention(X, A) :- intention(X, A), good(A,Y,M).

badintention(X, B) :- badintention(X, A), believes(X, cons(B, A)).
goodintention(X, B) :- goodintention(X, A), believes(X, cons(B, A)).

effect(kill(X), involves(X)) :- event(kill(X)).
effect(dies(X), involves(X)) :- event(dies(X)).

%%% *** SCENARIO
time(0..7).

action(load(gun)). 
action(shoot(enemy)).
auto(kill(enemy)).
auto(dies(enemy)).

fluent(alive(enemy)).
fluent(loaded(gun)).
fluent(flying(bullet)).
nonInertial(dying(enemy)). 

agent(shooter).
agent(enemy).

initially(alive(enemy)).
initially(neg(loaded(gun))).
initially(neg(flying(bullet))).

effect(load(gun), loaded(gun)).
precond(loaded(gun), shoot(enemy)).
effect(shoot(enemy), flying(bullet)).
effect(shoot(enemy), neg(loaded(gun))). 
precond(flying(bullet), kill(enemy)).
effect(kill(enemy),neg(flying(bullet))).
effect(kill(enemy), dying(enemy)).

precond(dying(enemy), dies(enemy)).

intention(shooter, load(gun)).

performs(shooter, load(gun), 1).
performs(shooter, shoot(enemy), 2). 



%hide.
%#show per/2.
%#show imp/2.

% WEIGHT
%#show weight/2.
%#show good/3.
%#show bad/3.
%#show weightedGood/3.
%#show weightedBad/3.

% PURE BAD
%#show goodCons/3.
%#show badCons/3.

% LEAST BAD\
%#show worse/2.
%#show notWorstCons/4.
%#show worstCons/4.

% BENEFITS OUTWEIGH
%#show weightCons/5.
%#show weightAct/2.
% RULE UTI
%#show instance/2.
%#show ruleCount/2.
%#show weightRule/2.

% KANT
%#show aim/2.

%#show performs/4.
%#show occurs/3.
%#show holds/3.
%#show initiates/4.
%#show terminates/4.
%#show clipped/3.
%#show incomplete/3.
%#show possible/3.
%#show cons/4.
%#show nonInertial/1. }
