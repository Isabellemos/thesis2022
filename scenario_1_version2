% *** Original Framework 
% (small changes on the clipped predicate, the Doctrine of Double effect rules, and only the relevant ethical constraints included)


% ACTION
event(A):-action(A).
event(A):-auto(A).
event(A) :- act(A).


% FLUENTS
initiates(E,F,T):- effect(E,F), occurs(E,T).
%not negative(S,F): in sim S is er geen negatief effect op F. 
terminates(E,F,T):- effect(E,neg(F)), occurs(E,T).
holds(F,0):- initially(F).
clipped(F,T):- terminates(E,F,T).
clipped(neg(F), T) :- holds(F, T+1), time(T), fluent(F). 


holds(F,T):- initiates(E,F,T-1), time(T).
holds(F,T):- holds(F,T-1), not clipped(F,T-1), not nonInertial(F), time(T).
%holds(F, T) :- initially(F), not clipped(0, F, T), fluent(F), action(A), time(T).
%holds(F, T2) :- occurs(A, T1), initiates(A, F, T1), T1 < T2, not clipped(T1, F, T2), fluent(F), action(A), time(T1), time(T2).


% EVENTS
incomplete(E,T):- precond(F,E), not holds(F,T), time(T). 
possible(E,T):- not incomplete(E,T), event(E), time(T).
occurs(U,T):- possible(U,T), auto(U). 
occurs(A,T):- possible(A,T), performs(D,A,T), action(A).


% CONSEQUENCES
cons(E,T,F):- occurs(E,T), effect(E,F), holds(F,T+1).
cons(F,T,E):-  occurs(E,T), precond(F,E), holds(F,T).
cons(E1,T1,E3):- cons(E1,T1,C2), cons(C2,T2,E3), event(E1), event(E3), T2>T1.


% MODALITIES
%modality(I;V) :- right(I), value(V).
modality(I) :- right(I).
m_Weight(M,1) :- modality(M).
t_Weight(E,1) :- effect(E,involves(X)).
%value(helpfulness).
right(life).


% ETHICAL EVENT SPECIFICATION
% VALUES
%effect(cure(X,G), displays(helpfulness)):- auto(cure(X,G)).
%effect(kill(X,G), neg(displays(helpfulness))):- auto(kill(X,G)).


% RIGHTS:
effect(kill(X), neg(life)) :- event(kill(X)).
effect(dies(X), neg(life)) :- event(dies(X)).
effect(shoot(X), neg(life)) :- event(shoot(X)).


% VALUES
%good(E,X,M):- effect(E,involves(X)), effect(E,displays(M)), value(M).
%bad(E,X,M):- effect(E,involves(X)), effect(E,neg(displays(M))), value(M).


% RIGHTS
bad(E,X,M):- effect(E,involves(X)), effect(E,neg(M)), right(M).

good(E,X,M):- effect(E,involves(X)), not effect(E,neg(M)), right(M).


% WEIGHT
weightedGood(E,N1*N2,M) :- good(E,X,M), m_Weight(M,N1), t_Weight(E,N2).
weightedBad(E,N1*N2,M) :- bad(E,X,M), m_Weight(M,N1), t_Weight(E,N2).
weight(E,1) :- good(E,X,M).
weight(E,1) :- bad(E,X,M).
final_weight(E,N1-N3) :- event(E), N1=#sum{N2 : weightedGood(E,N2,M1)}, N3=#sum{N4 : weightedBad(E,N4,M2)}.


% THEORIES OF THE RIGHT

%% CONSEQUENTIALISM

%%% PRINCIPLE OF BENEFITS VS COSTS
weightCons(A,T,E,N):- event(A), cons(A,T,E), final_weight(E,N).
weightAct(A,N):- event(A), N=#sum{N1 : weightCons(A,T,E,N1)}.
imp(benefitsCosts,A):- weightAct(A,N), N<0.
per(benefitsCosts,A):- event(A), not imp(benefitsCosts,A).

%%% DEONTOLOGY 

%%% DDE (doctrine of double effect)
imp(dde1,A) :- event(A), bad(A,Y,M).
imp(dde2,A) :- event(A), holds(badintention(X, A), T). 
imp(dde3,A):- event(A), cons(A,T,E1), cons(E1,T2,E2), bad(E1,Y1,M1), good(E2,Y2,M2).
imp(dde4,A):- imp(benefitsCosts,A).
per(dde,A):-  event(A), not imp(dde1,A), not imp(dde2,A), not imp(dde3,A), not imp(dde4,A). 


%%% *** My addition to framework 

neg(neg(F)) :- fluent(F), holds(F). 


% *** INTENTIONALITY 

cons(A, B) :- cons(A, T, B), time(T).

holds(intention(X,B), T) :- holds(intention(X, A), T), believes(X, cons(A, B)).
holds(badintention(X, A), T) :- holds(intention(X, A), T), bad(A,Y,M), time(T). 
holds(goodintention(X, A), T) :- holds(intention(X, A), T), good(A,Y,M), time(T). 

effect(kill(X), involves(X)) :- event(kill(X)).
effect(dies(X), involves(X)) :- event(dies(X)).
effect(shoot(X), involves(X)) :- event(shoot(X)).


%%% *** SCENARIO
time(0..10).

action(load(gun)). 
action(shoot(enemy)).
action(kill(enemy)).
event(dies(enemy)).

fluent(alive(enemy)).
fluent(loaded(gun)).
fluent(flying(bullet)).
fluent(dying(enemy)).

fluent(intention(shooter, load(gun))).
fluent(intention(shooter, shoot(enemy))).
fluent(intention(shooter, kill(enemy))).
fluent(intention(shooter, dies(enemy))).

nonInertial(dying(enemy)). 

agent(shooter).
agent(enemy).

initially(alive(enemy)).
initially(neg(loaded(gun))).
initially(neg(flying(bullet))).
initially(neg(dying(enemy))).

% LOAD
precond(alive(enemy), load(gun) :- action(load(gun)).
precond(neg(loaded(gun)), load(gun)) :- action(load(gun)).
effect(load(gun), loaded(gun)) :- action(load(gun)).
effect(load(gun), neg(intention(shooter, load(gun)))) :- action(load(gun)). 


% SHOOT
precond(alive(enemy), shoot(enemy)).
precond(loaded(gun), shoot(enemy)).
effect(shoot(enemy), neg(loaded(gun))). 
effect(shoot(enemy), flying(bullet)).


% KILL (auto event)
precond(flying(bullet), kill(enemy)).
effect(kill(enemy), neg(flying(bullet))).
effect(kill(enemy), dying(enemy)).

% DIES (auto event)
precond(dying(enemy), dies(enemy)).
precond(dying(enemy), neg(alive(enemy))). 
effect(dies(enemy), neg(alive(enemy))).
effect(dies(enemy), neg(intention(shooter, dies(enemy)))).


% INTENTIONS

%% if A has occured, (bad)intention of A is terminated
terminates(A, intention(X,A), T) :- holds(intention(X,A), T), occurs(A, T), time(T).
terminates(A, badintention(X,A), T) :- terminates(A, intention(X,A), T).
terminates(A, goodintention(X, A), T) :- terminates(A, intention(X,A), T).


%% The agent has the intention to load at time 1. 
holds(intention(shooter, load(gun)), 1).


%% The agent has beliefs about the following consequences
believes(shooter, cons(load(gun), shoot(enemy))). 
believes(shooter, cons(shoot(enemy), kill(enemy))). 
believes(shooter, cons(kill(enemy), dies(enemy))). 

performs(shooter, load(gun), 2).
performs(shooter, shoot(enemy), 4).
